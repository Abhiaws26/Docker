name: Deploy to ECS Fargate

on:
  push:
    branches:
      - main  # Trigger on pushes to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # Run on the latest Ubuntu environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1  # Set the region to your ECS region

      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: 474668401763.dkr.ecr.us-east-1.amazonaws.com/docker-private
          region: us-east-1

      - name: Tag Docker image for ECR
        run: |
         docker tag dockerimages:latest 474668401763.dkr.ecr.us-east-1.amazonaws.com/docker-private:latest

      - name: Push Docker image to AWS ECR
        run: |
          docker push 474668401763.dkr.ecr.us-east-1.amazonaws.com/docker-private:latest

      - name: Register ECS Task Definition
        run: |
          ecs_task_definition=$(cat <<EOF
          {
            "family": "docker-ecs",
            "executionRoleArn": "arn:aws:ecs:us-east-1:474668401763:cluster/docker-ecs",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "my-container",
                "image": "474668401763.dkr.ecr.us-east-1.amazonaws.com/docker-private:latest",
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          )
          echo "$ecs_task_definition" > task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      - name: Create or Update ECS Service
        run: |
          cluster_name="docker-ecs"
          service_name="fargate-service"
          task_definition="fargate-task"
          
          # Check if service exists
          service_exists=$(aws ecs describe-services --cluster $cluster_name --services $service_name --query "services[0].fargate-service" --output text)
          
          if [ "$service_exists" == "None" ]; then
            # If service doesn't exist, create it
            aws ecs create-service --cluster $docker-ecs --service-name $fargate-service --task-definition $fargate-task --desired-count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[subnet-08761e1becf6bb933],securityGroups=[sg-0173d7258623c7155],assignPublicIp=ENABLED}"
          else
            # If service exists, update it
            aws ecs update-service --cluster $docker-ecs --service $fargate-service --task-definition $fargate-task
          fi
